
//指针笔试题解析
#include <stdio.h>

////笔试题1
//int main()
//{
//	int a[5] = { 1, 2, 3, 4, 5 };
//	int *ptr = (int *)(&a + 1);
//	//&a+1表示数组末尾元素的下一个位置
//	printf("%d,%d", *(a + 1), *(ptr - 1)); //2  5
//	//*(a+1)表示a[1]即2
//	//*(ptr-1)即a[4]-->5
//	return 0;
//}

////笔试题2
//struct Test
//{
//	int Num;
//	char *pName;
//	short sDate;
//	char ch[2];
//	short s[4];
//}*p;
////假设p的值为0x0000 0000
//int main()
//{
//	printf("%d\n", sizeof(Test));
//	//4+4+2+2+8=20
//	printf("%p\n", p + 0x1);
//	//p+0x1，结构体指针+1，加20个字节，20按十六进制是14
//	printf("%p\n", (unsigned long)p + 0x1);
//	//强制转换为无符号长整形，再加1，结果就是1，十六进制打印为0x00000001
//	printf("%p\n", (unsigned int*)p + 0x1);
//	//强制转换为int型指针，所以占4个字节，跳过4个字节，按照十六进制打印就是0x00000004
//	return 0;
//}

////笔试题3
//int main()
//{
//	int a[4] = { 1, 2, 3, 4 };
//	int *p1 = (int *)(&a + 1);    
//	int *p2 = (int*)((int)a + 1); //4 02000000
//	printf("%x,%x\n", p1[-1], *p2);//%x:以十六进制打印（以16进制输出变量的地址）
//	//p1[-1]-->*(p1-1),取到元素4
//	//假设a的地址为0x100，(int)a+1,将a强转为整形，再加1 等于0x101
//	//指针读取4个字节00 00 00 02，由于是小端字节序，所以打印02 00 00 00
//	return 0;
//}

////笔试题4
//int main()
//{
//	int a[3][2] = { (0, 1), (2, 3), (4, 5) };
//	int *p;
//	p = a[0];
//	printf("%d\n", p[0]);
//	//逗号表达式，它的值为最后一个表达式的值
//	//所以二维数组的排列为：
//	//1  3
//	//5  0
//	//0  0
//	return 0;
//}

////笔试题5
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;
//	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
//	//int(*p)[4]数组指针p，所以&a[4][2]-&p[4][2]相差4个字节
//	//-4的原码：1000 0000 0000 0000 0000 0000 0000 0100
//	//    补码：1111 1111 1111 1111 1111 1111 1111 1100
//	//%p以十六进制打印地址
//	return 0;
//}
//
////笔试题6
//int main()
//{
//	int a[2][5] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int *p1 = (int *)(&a + 1);
//	//指向数组末尾元素的下一个地址
//	int *p2 = (int *)(*(a + 1));
//	//*(a+1)第二行首元素的地址
//	printf("%d, %d\n", *(p1 - 1), *(p2 - 1));//10  5
//	return 0;
//}
//
////笔试题7
//int main()
//{
//	char *a[] = { "work", "at", "alibaba" };
//	char **pa = a;
//	pa++;
//	printf("%s\n", *pa);
//	//二级指针指向了指针数组名，++就是指针的指向加1，指向了"at"
//	return 0;
//}

//笔试题8
int main()
{
	char *c[] = { "ENTER", "NEW", "POINT", "FIRST" };
	char**cp[] = { c + 3, c + 2, c + 1, c };
	char***cpp = cp;
	printf("%s\n", **++cpp);        //"POINT"
	printf("%s\n", *--*++cpp + 3);  //""
	printf("%s\n", *cpp[-2] + 3);
	printf("%s\n", cpp[-1][-1] + 1);
	return 0;
}
