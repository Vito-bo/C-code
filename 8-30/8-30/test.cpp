
#include <stdio.h>
#include <string.h>

//进阶-数据的存储

////判断当前机器的字节序
//int check_sys()
//{
//	int i = 1;
//	return (*(char *)&i);
//}
//int check_sys1()
//{
//	union
//	{
//		int i;
//		char c;
//	}un;
//	un.i = 1;
//	return un.c;
//}
//
//int main()
//{
//	int ret = check_sys();
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}

////数据存储和读取的差别
////练习1
//int main()
//{
//	char a = -1;
//	//源码；1000 0001
//	//反码：1111 1110
//	//补码：1111 1111
//	//整型提升：1111 1111 1111 1111 1111 1111 1111 1111(补码)
//	//原码打印：1000 0000 0000 0000 0000 0000 0000 0001
//	signed char b = -1;
//	//源码；1000 0001
//	//反码：1111 1110
//	//补码：1111 1111
//	//整型提升：1111 1111 1111 1111 1111 1111 1111 1111(补码)
//	//原码打印：1000 0000 0000 0000 0000 0000 0000 0001
//	unsigned char c = -1;
//	//原码：1000 0001
//	//反码：1111 1110
//	//补码：1111 1111
//	//整型提升：0000 0000 0000 0000 0000 0000 1111 1111(原码)
//	//无符号数，整形提升时高位补0
//	printf("a=%d,b=%d,c=%d", a, b, c);//%d以十进制形式输出整数
//	printf("\n");
//	return 0;
//}

////练习2
//int main()
//{
//	char a = -128;
//	//原码：1000 0000
//    //反码：0111 1111
//	//补码：1000 0000
//	//整形提升：1111 1111 1111 1111 1111 1111 1000 0000
//	//%u无符号十进制数打印。1111 1111 1111 1111 1111 1111 1000 0000
//	signed char b = -1;
//	//原码：1000 0001
//	//反码：1111 1110
//	//补码：1111 1111
//	//整形提升：1111 1111 1111 1111 1111 1111 1111 1111
//	//%u无符号十进制数打印。1111 1111 1111 1111 1111 1111 1111 1111
//	printf("%u\n", a);
//	printf("%u\n", b);
//	return 0;
//}

////练习3
//int main()
//{
//	char a = 128;
//	//原码：1000 0000
//	//补码=反码=原码
//	//整形提升：1111 1111 1111 1111 1111 1111 10000 1000
//	printf("%u\n", a);//4294967168
//	return 0;
//}
//
////练习4
//int main()
//{
//	int i = -20;
//	unsigned int j = 10;
//	printf("%d\n", i + j);
//	//按照补码的形式进行运算，最后格式化成为有符号整数
//	return 0;
//}

////练习5
//int main()
//{
//	char a[1000];
//	int i;
//	for (i = 0; i<1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d", strlen(a));//255
//	return 0;
//}

////练习6
//unsigned char i = 0;
//int main()
//{
//	int count = 0;
//	for (i = 0; i <= 255; i++)
//	{
//		count++;
//		printf("hello world\n");//无限循环
//	}
//	return 0;
//}

int main()
{
	int n = 9;
	float *pFloat = (float *)&n;
	printf("n的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);
	*pFloat = 9.0;
	printf("num的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);
	return 0;
}